.card {
  display: flex;
  flex-direction: column;

  /*
   * TODO: discuss how we would like to determine max width
   */
  width: 330px;
}

a.card {
  color: inherit;
  text-decoration: none;
}

.card img {
  /*
   * TODO: discuss if we want to control the image size/scale based on props, or if it should be svg in all cases
   */
  width: 100%;
  height: auto;
}

.card.neutralBackground {
  background-color: var(--fds-semantic-surface-neutral-default);
}

.card.subtleBackground {
  background-color: var(--fds-semantic-surface-neutral-subtle);
}

.card.neutralBackground:hover,
.card.subtleBackground:hover {
  background-color: var(--fds-semantic-surface-neutral-subtle-hover);
}

.card.neutralBackground:active,
.card.subtleBackground:active {
  background-color: var(--fds-semantic-surface-neutral-subtle-hover);
}

.card.firstBackground {
  background-color: var(--fds-semantic-surface-first-light);
}

.card.firstBackground:hover {
  background-color: var(--fds-semantic-surface-first-light-hover);
}

.card.firstBackground:active {
  background-color: var(--fds-semantic-surface-first-light-active);
}

.card.secondBackground {
  background-color: var(--fds-semantic-surface-second-light);
}

.card.secondBackground:hover {
  background-color: var(--fds-semantic-surface-second-light-hover);
}

.card.secondBackground:active {
  background-color: var(--fds-semantic-surface-second-light-active);
}

.card.thirdBackground {
  background-color: var(--fds-semantic-surface-third-light);
}

.card.thirdBackground:hover {
  background-color: var(--fds-semantic-surface-third-light-hover);
}

.card.thirdBackground:active {
  background-color: var(--fds-semantic-surface-third-light-active);
}

.headerDivided {
  border-bottom: var(--fds-border_width-default) solid var(--fds-semantic-border-neutral-subtle);
}

.footerDivided {
  border-top: var(--fds-border_width-default) solid var(--fds-semantic-border-neutral-subtle);
}

.section {
  display: flex;
  padding: var(--fds-spacing-4);
  flex-wrap: wrap;
  word-wrap: break-word;
}

.section.flexStartJustify {
  justify-content: flex-start;
}

.section.flexEndJustify {
  justify-content: flex-end;
}

.section.centerJustify {
  justify-content: center;
}

.section.spaceBetweenJustify {
  justify-content: space-between;
}

.section.section.column {
  flex-direction: column;
}

.section.row {
  flex-direction: row;
}

.section.flexStartAlign {
  align-items: flex-start;
}

.section.flexEndAlign {
  align-items: flex-end;
}

.section.centerAlign {
  align-items: center;
}

.section.baselineAlign {
  align-items: baseline;
}

.section.stretchAlign {
  align-items: stretch;
}

.section.column > * + * {
  margin-top: var(--fds-spacing-4);
}

.section.row > * + * {
  margin-left: var(--fds-spacing-4);
}

.groupContainer {
  --fdsc-gap: var(--fds-spacing-2);

  display: flex;
  max-width: 1000px;
  gap: var(--fdsc-gap);
  list-style-type: none;
  padding: 0;
  margin: 0;
}
